@inject NavigationManager NavManeger
@page "/Admin"

@if (pageHasLoded)
{
    if (isAdmin)
    {
        <h1 style="color:black">Users</h1>
        if (UserList != null)
        {
            foreach (var user in UserList)
            {
                <div class="card">
                    <div class="card-body">
                        <h2 style="color:black">@user.UserName</h2>
                        <div style="width: 100%; overflow: hidden;">
                            <div style="float: left; color:black">@user.Id</div>
                            <div style="float: right;">
                                <button class="btn btn-danger" @onclick="@(() => DeleteUser(user.UserName))">Delete User </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        <div>
            <br>
            <spacer type="horizontal" width="100" height="100"> </spacer>
            <br>
        </div>

        <h1 style="color:black">Chats</h1>
        if (ChatList != null)
        {
            foreach (var Chat in ChatList)
            {
                <div class="card">
                    <div class="card-body">
                        <h2 style="color:black">@Chat.Name</h2>
                        <div style="width: 100%; overflow: hidden;">
                            <div style="float: left; color:black">@Chat.Id</div>
                            <div style="float: right;">
                                <button class="btn btn-danger" @onclick="@(() => DeleteChat(Chat.Id))">Delet Chat </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    }
    if (isAdmin == false)
    {
        NavManeger.NavigateTo("/");
    }
}




@code {
    ICollection<UserModel>? UserList { get; set; } = new List<UserModel>();
    ICollection<ChatModel>? ChatList { get; set; } = new List<ChatModel>();
    UserModel CurrentUser = new();
    UserModel UsertToBeDeleted = new();
    ChatModel ChatToBeDeleted = new();
    
    bool isAdmin = false;
    bool pageHasLoded = false;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetUserClaim();
        if (user.user != null)
        {
            CurrentUser = user.user;
            var adminUser = await UserService.CheckIfAdmin(CurrentUser.UserName);
            Console.WriteLine(adminUser);
            if (adminUser)
            {
                UserList = await UserService.GetAllUsers();
                ChatList = await ChatService.GetChats();
                if (ChatList != null && UserList != null)
                {
                    pageHasLoded = true;
                    isAdmin = true;
                    StateHasChanged();
                }
                 StateHasChanged();
            }
            StateHasChanged();
        }
        StateHasChanged();
    }

    public async Task DeleteUser(string UserName)
    {
        UsertToBeDeleted = await UserService.GetUser(UserName);
        if (UsertToBeDeleted != null)
        {
            UsertToBeDeleted.isDeleted = true;
            await UserService.UpdateUser(UsertToBeDeleted, UserName);
        }
        StateHasChanged();
    }

    public async Task DeleteChat(int id)
    {
        ChatToBeDeleted = await ChatService.GetChatById(id);
        if (ChatToBeDeleted != null)
        {
            ChatToBeDeleted.IsChatEnded = true;
            await ChatService.UpdateChat(ChatToBeDeleted, id);
        }
        StateHasChanged();
    }
}

