@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Connections

@layout MainLayout

@page "/conversations"

<style>
    .chat-paper{
        height: 50rem!important;
        border-radius: 15px!important;    
        overflow-y: auto;
    }
    .messageChip{
        margin-left: 20px;
        margin-top: 5px;
        margin-right: 20px;
        max-width: 220px!important;
        max-height: 250px!important;
        height: auto;
        background: #0a58ca;
        box-sizing: border-box!important;
        border-radius: 5px!important;
    }
    .chip-text{
        flex-wrap: wrap;
        word-wrap: break-word!important;
        overflow-y: visible;
        color: white;
    }
</style>

@if (_pageLoaded)
{
@if (!_isChatting)
{
    <p>Welcome @User.UserName</p>
    <MudTable Items="@User.Chats">
        <ColGroup>
            <col style="width: 60px;"/>
            <col/>
            <col style="width: 60%;"/>
            <col/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Chats</MudTh>
            <MudTh>Actions</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Chat.Name</MudTd>
            <MudTd> @context.ChatId </MudTd>
            <MudTd>
                <MudButton Color="Color.Dark" @onclick="(() => Chat(context.Chat.Name, context.ChatId))">Enter</MudButton>
                <MudButton Color="Color.Dark">Manage Chat</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    @if (_invitingUser)
    {
        <MudTable SelectedItem="@SelectedChat">
            <HeaderContent>
                <MudTh>Chat</MudTh>
                <MudTh>Current</MudTh>
                <MudTh>New</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>Chat</MudTd>
                <MudTd>Current</MudTd>
            </RowTemplate>
        </MudTable>
    }
}
else
{
    @*<div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>*@
    <span>Connected As: <b>@User.UserName.ToUpperInvariant()</b></span>
    <div class="page-container">
        @if (SelectedChat != null)
        {
            <div class="field-container">
                <div class="chat_container">
                    <MudPaper Width="480px" Height="100%" Class="chat-paper">
                        @*<p>@SelectedChat.User.UserName</p>*@
                        @foreach (var item in MessageList)
                        {
                            <div class="messageContainer">
                                <p class="messageHeader">
                                    @item.User.UserName.ToUpper()
                                </p>
                                @if (item.User.UserName == User.UserName)
                                {
                                <MudChip Style="" Class="messageChip">
                                    <MudText Class="chip-text">
                                        @item.Message
                                    </MudText>
                                </MudChip>
                                }
                                @if (item.User.UserName != User.UserName)
                                {
                                <MudChip Style="background: darkgrey" Class="messageChip">
                                    <MudText Class="chip-text">
                                        @item.Message
                                    </MudText>
                                </MudChip>
                                }
                            </div>
                        }
                    </MudPaper>
                </div>
                <div class="message">
                    <input @bind="_message.Message" class="messageinput" type="text" name="txt" placeholder="Write something..." wrap="hard" rows="5" cols="30" required="">
                    @*<button class="oi oi-pencil" aria-hidden="true" id="Pencil"></button>
                    <button class="oi oi-trash" aria-hidden="true" id="Trash"></button>*@
                    <button @onclick="@(() => SendMessage(_message))" class="oi oi-location" aria-hidden="true" id="Send"></button>
                </div>
            </div>
        }
        @*</div>*@

    </div>
}
}


@code {
    private bool _isChatting = false;
    private bool _pageLoaded = false;
    private bool _invitingUser = false;
    UserModel? User { get; set; } // name of the user who will be chatting
    UserChat? SelectedChat { get; set; } = new(); // Current Chat
    HubConnection hubConnection;
    MessageModel _message { get; set; } = new();
    ICollection<MessageModel> MessageList { get; set; } = new List<MessageModel>();
    // string? _message;
    string? encryptedMessage;
    string? _chatName { get; set; }
    string? _userName;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/conversations"))
            .Build();

        var currentUser = await UserService.GetUserClaim();

        if (currentUser.Message == "Success")
        {
            User = await UserService.GetUser(currentUser.user.UserName);

            _pageLoaded = true;
            await InvokeAsync(StateHasChanged);
            StateHasChanged();
        }
    }

    private async Task Chat(string chatName, int chatId)
    {
        MessageList = await MessageService.GetChatMessages(chatId);
        SelectedChat = User.Chats.FirstOrDefault(c => c.Chat.Name == chatName); //remove
        _chatName = chatName;

        hubConnection.On<MessageModel>("ReceiveMessage", (message) =>
        {
            MessageList.Add(message);
            InvokeAsync(StateHasChanged);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await hubConnection.InvokeAsync("EnterChat", chatName);
        await hubConnection.SendAsync("SendMessage", _message, chatName);
        _isChatting = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage(MessageModel messageModel)
    {
        if (_isChatting)
        {
            messageModel = new()
            {
                Message = messageModel.Message,
                MessageCreated = DateTime.Now,
                UserId = User.Id,
                ChatId = SelectedChat.ChatId,
                IsMessageEncrypted = SelectedChat.Chat.IsChatEncrypted
            };
            await MessageService.PostMessage(messageModel);
            await hubConnection.SendAsync("SendMessage", messageModel, _chatName);
            _message.Message = string.Empty;
            messageModel = default(MessageModel)!;
            await InvokeAsync(StateHasChanged);
        }
    }

    /*public async Task DisposeAsync()
    {
        await hubConnection.DisposeAsync();
        await base.InvokeAsync("HasDisconnected", );
    }*/

}