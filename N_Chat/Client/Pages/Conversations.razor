@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Connections
@inject IJSRuntime JsRuntime
@layout MainLayout

@page "/conversations"

@if (_pageLoaded)
{
@if (!_isChatting)
{
    <p>Welcome @User.UserName</p>
    <MudTable Items="@User.Chats">
        <ColGroup>
            <col style="width: 60px;"/>
            <col/>
            <col style="width: 60%;"/>
            <col/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Chats</MudTh>
            <MudTh>Actions</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Chat.Name</MudTd>
            <MudTd> @context.ChatId </MudTd>
            <MudTd>
                <MudButton Color="Color.Dark" @onclick="(() => Chat(context.Chat.Name, context.ChatId))">Enter</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    @if (_invitingUser)
    {
        <MudTable SelectedItem="@SelectedChat">
            <HeaderContent>
                <MudTh>Chat</MudTh>
                <MudTh>Current</MudTh>
                <MudTh>New</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>Chat</MudTd>
                <MudTd>Current</MudTd>
            </RowTemplate>
        </MudTable>
    }
}
else
{
    @*<div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>*@
    <span>Connected As: <b>@User.UserName.ToUpperInvariant()</b>
        <button @onclick="() => DisposeAsync(SelectedChat.Name)"></button>
        </span>
    <body class="page-container">
        @if (SelectedChat != null)
        {
            <div class="field-container">
                <div class="chat_container">
                    @foreach (var item in MessageList)
                    {
                        <div class="messageContainer">
                            @if (item.UserName == User.UserName)
                            {
                                <div class="item-user">@item.UserName</div>
                                <div class="messageText-user">@item.Message</div>
                            }
                            @if (item.UserName != User.UserName)
                            {
                                <div class="item-others">@item.UserName</div>
                                <div class="messageText-others">@item.Message</div>
                            }
                        </div>
                    }
                </div>
                <div class="user-container">
                    @foreach (var item in SelectedChat.Users)
                    {
                        if (item.User != null)
                            @item.User.UserName;
                    }
                </div>
                <div class="message">
                    <input @bind="_message.Message" class="messageinput" type="text" name="txt" placeholder="Write something..." wrap="hard" rows="5" cols="30" required="">
                    @*<button class="oi oi-pencil" aria-hidden="true" id="Pencil"></button>
                    <button class="oi oi-trash" aria-hidden="true" id="Trash"></button>*@
                    <button @onclick="@(() => SendMessage(_message))" class="oi oi-location" aria-hidden="true"></button>
                </div>
            </div>
        }
        @*</div>*@

    </body>
}
}


@code {
    ICollection<MessageModel> MessageList { get; set; } = new List<MessageModel>();
    ICollection<UserModel> UserList { get; set; } = new List<UserModel>();
    
    UserModel? User { get; set; }
    ChatModel? SelectedChat { get; set; } = new();
    HubConnection hubConnection;
    MessageModel _message { get; set; } = new();
    
    private bool _isChatting = false;
    private bool _pageLoaded = false;
    private bool _invitingUser = false;
    
    string? _chatName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/conversations"))
            .Build();

        var currentUser = await UserService.GetUserClaim();

        if (currentUser.Message == "Success")
        {
            User = await UserService.GetUser(currentUser.user.UserName);

            _pageLoaded = true;
            await InvokeAsync(StateHasChanged);
            StateHasChanged();
        }
    }

    private async Task Chat(string chatName, int chatId)
    {
        MessageList = await MessageService.GetChatMessages(chatId);
        SelectedChat = User.Chats.FirstOrDefault(x => x.ChatId == chatId).Chat;
        _chatName = chatName;

        hubConnection.On<MessageModel>("ReceiveMessage", (message) =>
        {
                 //checks if its your message so list doesnt double add
            MessageList.Add(message);
            InvokeAsync(StateHasChanged);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await hubConnection.InvokeAsync("EnterChat", chatName);
        await hubConnection.SendAsync("SendMessage", chatName);
        _isChatting = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage(MessageModel messageModel)
    {
        if (_isChatting)
        {
            messageModel = new()
            {
                Message = messageModel.Message,
                MessageCreated = DateTime.Now,
                UserName = User.UserName,
                UserId = User.Id,
                ChatId = SelectedChat.Id,
                IsMessageEncrypted = SelectedChat.IsChatEncrypted
            };
            await MessageService.PostMessage(messageModel);
            await hubConnection.SendAsync("SendMessage", messageModel, _chatName);
            _message.Message = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task DisposeAsync(string chatName)
    {
        await hubConnection.DisposeAsync();
        await hubConnection.InvokeAsync("ExitChat", chatName);
    }
    


}