@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IMessageService MessageService
@inject IChatService ChatService

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Connections



@page "/conversations"


@if (_pageloaded)
{
@if (!_isChatting)
{
    <MudTable Items="@User.Chats">
        <ColGroup>
            <col style="width: 60px;"/>
            <col/>
            <col style="width: 60%;"/>
            <col/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Chat</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <MudButton Color="Color.Dark" @onclick="(() => Chat(context.Name))">Enter</MudButton>
                <MudButton Color="Color.Dark" @onclick="(() => AddUserToChat(context.Id))">Manage Chat</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    @if (_invitingUser)
    {
        <MudTable SelectedItem="@CurrentChat">
            <HeaderContent>
                <MudTh>Chat</MudTh>
                <MudTh>Current</MudTh>
                <MudTh>New</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>Chat</MudTd>
                <MudTd>Current</MudTd>
            </RowTemplate>
        </MudTable>
    }
}
else
{
    <body>
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@User.UserName</b></span>
        @foreach (var item in _messages)
        {
            <div class="scrollbox">
                <div class="msg">@item.User.UserName: @item.Message</div>
            </div>
        }
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    <div class="message">
        <input @bind="_message" class="messageinput" type="text" name="txt" placeholder="Write something..." wrap="hard" rows="5" cols="30" required="">
        <button class="oi oi-pencil" aria-hidden="true" id="Pencil"></button>
        <button class="oi oi-trash" aria-hidden="true" id="Trash"></button>
        <button @onclick="@(() => SendAsync(_message, _chatName))" class="oi oi-location" aria-hidden="true" id="Send"></button>

    </div>
    </body>
}
}


@code {
    private bool _isChatting = false;
    private bool _pageloaded = false;
    private bool _invitingUser = false;
    private UserModel? User { get; set; } // name of the user who will be chatting
    private MessageModel? DisplayMessage { get; set; } = new(); // on-screen message
    private MessageModel? InputMessage { get; set; } = new(); // new message input
    private ChatModel? CurrentChat { get; set; } = new(); // Current Chat
    private List<MessageModel> _messages = new(); // list of messages in chat
    private string _hubUrl;
    private HubConnection _hubConnection;
    private string? _message;
    private string? encryptedMessage;
    private string? _chatName;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserService.GetUserClaim();
        if (currentUser.Message == "Success")
        {
            User = currentUser.user;
            if (User != null)
            {
                User.Chats = await UserService.GetUserChats(User.Id);
                _pageloaded = true;
                StateHasChanged();
            }

            StateHasChanged();
        }
    }

    private async Task Chat(string chatName)
    {
        try
        {
            _isChatting = true; // Start chatting and force refresh UI.
            await Task.Delay(1);

            _messages.Clear(); // remove old messages if any

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/conversations"))
                .Build();

            _hubConnection.On<string, string, string>("SendGroupMessage", BroadcastMessage);
            _chatName = chatName; // Sets chatname after chosen item in list

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {User.UserName}: has joined the chat", chatName);
        }
        catch (Exception e)
        {
            DisplayMessage.Message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private async Task BroadcastMessage(string name, string message, string chatName)
    {
    //Adds message to list for display in html
        var findUser = User.UserName;
        if (findUser != null)
        {
            var user = await UserService.GetUserById(findUser);
            _messages.Add(new MessageModel()
            {
                Id = +1,
                Message = message,
                UserId = User.Id,
                User = user,
                MessageCreated = DateTime.Now,
            });
        }
        InvokeAsync(StateHasChanged); // update ui
    }

    //skicka ett privat meddeland i en chat
    private async Task SendAsync(string message, string chatName)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("SendGroupMessage", User.UserName, message, chatName);
            message = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {User.UserName} left chat room.", "");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task AddUserToChat(int chatId)
    {
        CurrentChat = await ChatService.GetChatById(chatId);
        _invitingUser = true;
        
    }
    /*//skicka ett privat meddeland i en chat-connectar till ett visst chatId-valbar med encrypt
    private async Task SendPrivateChatMessage(string userId, string user, string message, int chatId, bool isChatEncrypted)
    {
        CurrentChat = (new ChatModel() //create chat
        {
            Id = CurrentChat.Id,
            ChatCreated = DateTime.Now,
            CreatorId = userId,
            Name = CurrentChat.Name,
            Messages = new List<MessageModel>()
            {
                new() //Message in chat
                {
                    Message = message,
                    MessageCreated = DateTime.Now,
                    UserId = User.Id,
                }
            }
        }
            );

        InvokeAsync(StateHasChanged);
    }*/

}