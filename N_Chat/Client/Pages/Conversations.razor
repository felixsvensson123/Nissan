@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IMessageService MessageService

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Connections

@page "/conversations"



@if (!_isChatting)
{
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@User.UserName</b></span>
                @foreach (var item in _messages)
        {
            <div class="">
                <div class="user">@User.UserName</div>
                <div class="msg">@item.Message</div>
            </div>
        }
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">

    </div>
    <div class="message">
        <input @bind="_message" class="messageinput" type="text" name="txt" placeholder="Write something..." wrap="hard" rows="5" cols="30" required="">
        <button class="oi oi-pencil" aria-hidden="true" id="Pencil"></button>
        <button class="oi oi-trash" aria-hidden="true" id="Trash"></button>
        <button @onclick="@(() => SendAsync(_message))" class="oi oi-location" aria-hidden="true" id="Send"></button>
    </div>
}


@code {
    private bool _isChatting = false;
    private UserModel? User { get; set; } // name of the user who will be chatting
    private MessageModel? DisplayMessage { get; set; } = new();// on-screen message
    private MessageModel? InputMessage { get; set; } = new();// new message input
    public ChatModel? CurrentChat { get; set; } = new(); // Current Chat
    private List<MessageModel> _messages = new(); // list of messages in chat
    private string _hubUrl;
    private HubConnection _hubConnection;
    private string? _message;
    private string? encryptedMessage;



    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserService.GetUserClaim();
        if (currentUser.Message == "Success")
        {
            User = currentUser.user;

            StateHasChanged();
        }
    }

    public async Task Chat()
    {
        // check username is valid
        var currentUser = await UserService.GetUserClaim();
        if (currentUser.Message == "Success")
        {
            User = currentUser.user;

            StateHasChanged();
        }
        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = NavigationManager.BaseUri;

            _hubUrl = "/conversations";

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri(_hubUrl))
                .Build();

            _hubConnection.On<string, string, string>("Broadcast", BroadcastMessage);
            _hubConnection.On<string, string, string, int,bool>("RecivePrivateChatMessage",SendPrivateChatMessage);



            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {User.UserName}:{_message}");
        }
        catch (Exception e)
        {
            DisplayMessage.Message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private async Task BroadcastMessage(string name, string message, string userId)
    {
        // bool isMine = name.Equals(User.UserName, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new MessageModel()
        {
            Id = +1,
            Message = message,
            UserId = User.Id,
            MessageCreated = DateTime.Now,
        }
            );

        // Inform blazor the UI needs updating
        InvokeAsync(StateHasChanged);
    }





   

    //skicka ett privat meddeland i en chat-connectar till ett visst chatId-valbar med encrypt
    private async Task SendPrivateChatMessage(string userId,string user,string message,int chatId,bool isChatEncrypted)
    {
       

        CurrentChat = (new ChatModel()//create chat
            {
                Id = CurrentChat.Id,
                ChatCreated = DateTime.Now,
                CreatorId = userId,
                Name = CurrentChat.Name,
                Users = CurrentChat.Users,             
                Messages = new List<MessageModel>()

                {

                    new()//Message in chat
                    {
                   
                        Message=message,
                        MessageCreated = DateTime.Now,
                        UserId = User.Id,
                   
                    }   

               }
          }
       );

        InvokeAsync(StateHasChanged);

    }
   



   

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {User.UserName} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
            
            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", User.UserName, message, User.Id);

            message = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    /*private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }*/
}