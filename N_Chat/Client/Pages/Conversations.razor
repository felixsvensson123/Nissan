@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Connections



@page "/conversations"


@if (_pageLoaded)
{
@if (!_isChatting)
{
    <p>Welcome @User.UserName</p>
    <MudTable Items="@User.Chats">
        <ColGroup>
            <col style="width: 60px;"/>
            <col/>
            <col style="width: 60%;"/>
            <col/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Chat</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Chat.Name</MudTd>
            <MudTd>
                <MudButton Color="Color.Dark" @onclick="(() => Chat(context.Chat.Name))">Enter</MudButton>
                <MudButton Color="Color.Dark">Manage Chat</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    @if (_invitingUser)
    {
        <MudTable SelectedItem="@SelectedChat">
            <HeaderContent>
                <MudTh>Chat</MudTh>
                <MudTh>Current</MudTh>
                <MudTh>New</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>Chat</MudTd>
                <MudTd>Current</MudTd>
            </RowTemplate>
        </MudTable>
    }
}
else
{
    <body>
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@User.UserName</b></span>
        @foreach (var item in SelectedChat.Chat.Messages)
        {
            <div class="scrollbox">
                <div class="msg">@item.User.UserName.ToUpper(): @item.Message</div>
            </div>
        }

    </div>
    <div class="message">
        <input @bind="_message" class="messageinput" type="text" name="txt" placeholder="Write something..." wrap="hard" rows="5" cols="30" required="">
        <button class="oi oi-pencil" aria-hidden="true" id="Pencil"></button>
        <button class="oi oi-trash" aria-hidden="true" id="Trash"></button>
        <button @onclick="@(() => SendAsync(User.UserName , _message, SelectedChat.Chat.Name))" class="oi oi-location" aria-hidden="true" id="Send"></button>
    </div>
    </body>
}
}


@code {
    private bool _isChatting = false;
    private bool _pageLoaded = false;
    private bool _invitingUser = false;
    private UserModel? User { get; set; }// name of the user who will be chatting
    private UserChat? SelectedChat { get; set; } = new(); // Current Chat
    private List<ChatModel> UserChats { get; set; } = new();
    private string _hubUrl;
    private HubConnection _hubConnection;
    private string? _message;
    private string? encryptedMessage;
    private string? _chatName;
    private string? _userName;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserService.GetUserClaim();
        
        if (currentUser.Message == "Success")
        {
            User = await UserService.GetUser(currentUser.user.UserName);
            if (User != null)
            {
                _pageLoaded = true;
                StateHasChanged();
            }
        }
    }

    private async Task Chat(string chatName)
    {
        SelectedChat = User.Chats.FirstOrDefault(c => c.Chat.Name == chatName);
        await Task.Delay(1);
        _isChatting = true; // Start chatting and force refresh UI.
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/conversations"))
            .Build();

        _hubConnection.On<string, string, string>("SendGroupMessage", SendAsync);


        await _hubConnection.StartAsync();

       // await SendAsync( _userName, "Has joined the chat" ,chatName);
        await InvokeAsync(StateHasChanged); // update ui
    }

    private async Task BroadcastMessage(string userName, string message, string chatName)
    {
    //lägg till en lista som hämtar alla meddelanden från databasen och decryptar dom sedan displayar
        await InvokeAsync(StateHasChanged); // update ui
    }

    //skicka ett privat meddeland i en chat
    private async Task SendAsync(string userName, string message, string chatName)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("SendGroupMessage", userName, message, chatName);
            _userName = userName;
            MessageModel messageModel = new()
            {
                Message = message,
                MessageCreated = DateTime.Now,
                UserId = User.Id,
                ChatId = SelectedChat.ChatId,
                IsMessageEncrypted = SelectedChat.Chat.IsChatEncrypted
            };
            await MessageService.PostMessage(messageModel);
            message = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

}
