@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IMessageService MessageService
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Connections

@page "/conversations"


@if (PageHasLoaded)
{
@if (!_isChatting)
{
    <MudTable Items="@User.Chats">
        <ColGroup>
            <col style="width: 60px;"/>
            <col/>
            <col style="width: 60%;"/>
            <col style="width: 60px;"/>
            <col/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Chat</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <MudButton Color="Color.Dark" Id="@context.Id" @onclick="(() => Chat(context.Id))">Enter</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@User.UserName</b></span>
        @foreach (var item in _messages)
        {
            <div class="">
                <div class="user">@User.UserName</div>
                <div class="msg">@item.Message</div>
            </div>
        }
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    <div class="message">
        <input @bind="_message" class="messageinput" type="text" name="txt" placeholder="Write something..." wrap="hard" rows="5" cols="30" required="">
        <button class="oi oi-pencil" aria-hidden="true" id="Pencil"></button>
        <button class="oi oi-trash" aria-hidden="true" id="Trash"></button>
        <button @onclick="@(() => SendAsync(_message))" class="oi oi-location" aria-hidden="true" id="Send"></button>
    </div>
}
}

@code {
    bool PageHasLoaded = false;
    private bool _isChatting = false;
    private UserModel? User { get; set; } // name of the user who will be chatting
    private MessageModel? DisplayMessage { get; set; } = new(); // on-screen message
    private MessageModel? InputMessage { get; set; } = new(); // new message input
    public ChatModel? CurrentChat { get; set; } = new(); // Current Chat
    private List<MessageModel> _messages = new(); // list of messages in chat
    private string _hubUrl;
    private HubConnection _hubConnection;
    private string? _message;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserService.GetUserClaim();
        if (currentUser.Message == "Success")
        {
            User = currentUser.user;
            if (User != null)
            {
                User.Chats = await UserService.GetUserChats(User.Id);
                PageHasLoaded = true;
                StateHasChanged();
            }
        }
    }

    public async Task Chat(int id)
    {
        _isChatting = true; // Start chatting and force refresh UI.
        await Task.Delay(1);

        _messages.Clear(); // remove old messages if any

    // Create the chat client
        _hubUrl = "/conversations";
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(_hubUrl))
            .WithAutomaticReconnect()
            .Build();
        _hubConnection.On<string, string, string>("Broadcast", BroadcastMessage);
        await _hubConnection.StartAsync();

        await SendAsync($"[Notice] {User.UserName} joined chat room.");
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("SendMessage", User.UserName, message, User.Id);
            message = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task BroadcastMessage(string name, string message, string userId)
    {
        _messages.Add(new MessageModel()
        {
            Id = +1,
            Message = message,
            UserId = User.Id,
            MessageCreated = DateTime.Now,
        }
            );

        InvokeAsync(StateHasChanged); // Inform blazor the UI needs updating
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {User.UserName} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }


    //skicka ett privat meddeland i en chat
    private async Task SendPrivateChatMessageAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendPrivateChatMessage", _message, CurrentChat.Id, User.Id, User.UserName, CurrentChat.Name);
        }
    }

    private async Task SendEncryptChatMessageAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("EncryptChat", _message, CurrentChat.Id, User.Id, CurrentChat.Name, CurrentChat.IsChatEncrypted = true, User.UserName);
        }
    }


    /*private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }*/
}