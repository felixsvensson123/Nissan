@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Connections



@page "/conversations"


@if (_pageLoaded)
{
@if (!_isChatting)
{
    <p>Welcome @User.UserName</p>
    <MudTable Items="@User.Chats">
        <ColGroup>
            <col style="width: 60px;"/>
            <col/>
            <col style="width: 60%;"/>
            <col/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Chat</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Chat.Name</MudTd>
            <MudTd>
                <MudButton Color="Color.Dark" @onclick="(() => Chat(context.Chat.Name))">Enter</MudButton>
                <MudButton Color="Color.Dark">Manage Chat</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    @if (_invitingUser)
    {
        <MudTable SelectedItem="@SelectedChat">
            <HeaderContent>
                <MudTh>Chat</MudTh>
                <MudTh>Current</MudTh>
                <MudTh>New</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>Chat</MudTd>
                <MudTd>Current</MudTd>
            </RowTemplate>
        </MudTable>
    }
}
else
{
    <body>
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>Connected As: <b>@User.UserName</b></span>
        @if (SelectedChat != null)
        {
            @foreach (var item in SelectedChat.Chat.Messages)
            {
                <div class="scrollbox">
                    <div class="msg">
                        @if (item.User != null)
                        {
                            <span>@item.User.UserName: </span>
                        }
                        <p>Message: @item.Message</p>
                    </div>
                </div>
            }
        }
    </div>
    <div class="message">
        <input @bind="_message.Message" class="messageinput" type="text" name="txt" placeholder="Write something..." wrap="hard" rows="5" cols="30" required="">
        <button class="oi oi-pencil" aria-hidden="true" id="Pencil"></button>
        <button class="oi oi-trash" aria-hidden="true" id="Trash"></button>
        <button @onclick="@(() => SendMessage(_message))" class="oi oi-location" aria-hidden="true" id="Send"></button>
    </div>
    </body>
}
}


@code {
    private bool _isChatting = false;
    private bool _pageLoaded = false;
    private bool _invitingUser = false;
    private UserModel? User { get; set; }// name of the user who will be chatting
    private UserChat? SelectedChat { get; set; } = new(); // Current Chat
    private List<ChatModel> UserChats { get; set; } = new();
    private string _hubUrl;
    private HubConnection hubConnection;
    MessageModel _message { get; set; } = new();
    // string? _message;
    private string? encryptedMessage;
    private string? _chatName { get; set; }
    private string? _userName;
    
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/conversations"))
            .Build();

        var currentUser = await UserService.GetUserClaim();
        
        if (currentUser.Message == "Success")
        {
            User = await UserService.GetUser(currentUser.user.UserName);
            
            _pageLoaded = true;
            await InvokeAsync(StateHasChanged);
            StateHasChanged();
        }
    }

    private async Task Chat(string chatName)
    {
        SelectedChat = User.Chats.FirstOrDefault(c => c.Chat.Name == chatName);
        _chatName = chatName;
        
        hubConnection.On<MessageModel>("ReceiveMessage", (message) =>
        {
            SelectedChat.Chat.Messages.Add(message);
            InvokeAsync(StateHasChanged);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        
        await hubConnection.InvokeAsync("EnterChat", chatName);
        await hubConnection.SendAsync("SendMessage", _message ,chatName);
        _isChatting = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage(MessageModel messageModel)
    {
        if (_isChatting)
        {
            messageModel = new()
            {
                Message = messageModel.Message,
                MessageCreated = DateTime.Now,
                UserId = User.Id,
                ChatId = SelectedChat.ChatId,
                IsMessageEncrypted = SelectedChat.Chat.IsChatEncrypted
            };
            await MessageService.PostMessage(messageModel);
            await hubConnection.SendAsync("SendMessage", messageModel, _chatName);
            _message.Message = string.Empty;
            messageModel = default(MessageModel)!;
            await InvokeAsync(StateHasChanged);
        }
    }

    /*public async Task DisposeAsync()
    {
        await hubConnection.DisposeAsync();
        await base.InvokeAsync("HasDisconnected", );
    }*/

}
