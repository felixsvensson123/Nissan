@inject IUserService UserService;
@inject NavigationManager NavigationManager;
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthStateProvider
@layout Loginlayout


<div class="main">
   <input type="checkbox" id="chk" aria-hidden="true">
   <div class="login">
      <EditForm Model="LoginModel" OnValidSubmit="LoginUser">
         <label for="chk" aria-hidden="true">Login</label>
         @* <input type="text"> defines a single-line text input field: *@
         <input @bind-value="LoginModel.Username" type="text" id="username" placeholder="Username" required="">
         <input @bind-value="LoginModel.Password" type="password" placeholder="Password" required="">
         <div class="rememberlogin">
            <input type="checkbox" id="RememberMe"/>
            <label class="rememberme" for="RememberMe">Remember Me</label>
         </div>
         <button type="submit" href="/">Login</button>
      </EditForm>
   </div>

   <div class="signup">
      <EditForm Model="RegisterModel" OnValidSubmit="RegisterUser">
         <label for="chk" aria-hidden="true">Sign up</label>
         <input @bind-value="RegisterModel.Username" type="text" name="txt" placeholder="Username" required="">
         <input @bind-value="RegisterModel.Email" type="email" name="email" placeholder="Email" required="">
         <input @bind-value="RegisterModel.Password" type="password" id="password" name="pswd" placeholder="Password" required="">
         <input @bind-value="RegisterModel.ConfirmPassword" type="password" name="pswd" placeholder="Password" required="">
         @* password minimum 6 characters, is user clicks submit and password is too short we display "your password must be minimum 6 characters long."*@
         <div class="termsofserviceregister">
            <input type="checkbox" id="TermsOfService"/>
            <label class="termsofservice" for="TermsOfService">Terms Of Service</label>
         </div>
         <button type="submit" href="/">Sign up</button>
      </EditForm>
   </div>
</div>

@code {

   [Parameter]
   public LoginModel LoginModel { get; set; } = new();

   [Parameter]
   public RegisterModel RegisterModel { get; set; } = new();


   public async Task LoginUser(){
      try{
         string result = await UserService.LoginUser(LoginModel);
         Console.WriteLine("LoginUser()  result ="+result);

         //interact with browser's local storage API, set value and key.
         await LocalStorageService.SetItemAsStringAsync("isauthenticated", "true");
         NavigationManager.NavigateTo("/");
         StateHasChanged();
      }
      catch (Exception e){
         Console.WriteLine(e);
         Console.WriteLine("Login Failed");
         Console.WriteLine(e.Message);
         Console.WriteLine(e.StackTrace);
      }
      
}

   public async Task RegisterUser(){
       Console.WriteLine("aaa  ");

      //not accessible.
      string result = await UserService.SignUp(RegisterModel);
      Console.WriteLine("result = " + result);
      
      @*password must be minimum 6 characters long*@
      if(RegisterModel.Password.Length < 6){
         Console.WriteLine("your password must be minimum 6 characters long.");
      }

      if (result == "success"){
         Console.WriteLine("you have successfully registered.");
      }

      NavigationManager.NavigateTo("/");
      StateHasChanged();
   }

}