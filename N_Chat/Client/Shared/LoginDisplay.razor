@inject IUserService UserService;
@inject NavigationManager NavigationManager;
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthStateProvider
@layout Loginlayout

<div class="main">
	<input type="checkbox" id="chk" aria-hidden="true">
	<div class="login">
		<EditForm Model="LoginModel" OnValidSubmit="LoginUser">
			<label for="chk" aria-hidden="true">Login</label>
			<input @bind-value="LoginModel.Username" type="Username" placeholder="Username" required="">
			<input @bind-value="LoginModel.Password" type="password" placeholder="Password" required="">
			<button type="submit" href="/">Login</button>
		</EditForm>
	</div>

	<div class="signup">
		<EditForm Model="RegisterModel" OnValidSubmit="RegisterUser">
			<label for="chk" aria-hidden="true">Sign up</label>
			<input @bind-value="RegisterModel.Username" type="text" name="txt" placeholder="Username" required="">
			<input @bind-value="RegisterModel.Email" type="email" name="email" placeholder="Email" required="">
			<input @bind-value="RegisterModel.Password" type="password" name="pswd" placeholder="Password" required="">
			<input @bind-value="RegisterModel.ConfirmPassword" type="password" name="pswd" placeholder="Password" required="">
			<button type="submit" href="/">Sign up</button>
		</EditForm>
	</div>
</div>

@code {
	[Parameter]
	public LoginModel LoginModel { get; set; } = new();

	[Parameter]
	public RegisterModel RegisterModel { get; set; } = new();
	
	
	public async Task LoginUser()
	{
		string result = await UserService.LoginUser(LoginModel);
		Console.WriteLine(result);
		if (result == "Success") 
		{
			await LocalStorageService.SetItemAsStringAsync("isauthenticated", "true");
			NavigationManager.NavigateTo("/");
			StateHasChanged();
		}
		StateHasChanged();
	}	public async Task RegisterUser()
	{
		string result = await UserService.SignUp(RegisterModel);
		Console.WriteLine(result);
		NavigationManager.NavigateTo("/");
		StateHasChanged();
	}
}
